package devsearch.parsers


import devsearch.ast.{PackageDef, AST}
import org.scalatest.FlatSpec
import devsearch.utils._

import scala.util.parsing.json.JSONArray

/**
 * Created by pierre on 25/03/15.
 */
class FeatureExtractionTest extends FlatSpec {
    def getSampleAst(): AST = {
        val fileURL = getClass.getResource("/samples/AccountDataManager.java")
        val filePath = new java.io.File(fileURL.toURI).getAbsolutePath
        JavaParser.parse(filePath)
    }
//List(PackageDef(com.github.mobile.persistence,List(),List(Import(android.accounts.Account,false,false), Import(android.content.Context,false,false), Import(android.database.Cursor,false,false), Import(android.database.sqlite.SQLiteOpenHelper,false,false), Import(android.database.sqlite.SQLiteQueryBuilder,false,false), Import(android.util.Log,false,false), Import(com.github.mobile.RequestFuture,false,false), Import(com.github.mobile.RequestReader,false,false), Import(com.github.mobile.RequestWriter,false,false), Import(com.github.mobile.accounts.AuthenticatedUserTask,false,false), Import(com.github.mobile.core.issue.IssueFilter,false,false), Import(com.github.mobile.persistence.OrganizationRepositories.Factory,false,false), Import(com.google.inject.Inject,false,false), Import(com.google.inject.name.Named,false,false), Import(java.io.File,false,false), Import(java.io.IOException,false,false), Import(java.text.MessageFormat,false,false), Import(java.util.Collection,false,false), Import(java.util.Collections,false,false), Import(java.util.HashSet,false,false), Import(java.util.List,false,false), Import(java.util.concurrent.Executor,false,false), Import(java.util.concurrent.Executors,false,false), Import(org.eclipse.egit.github.core.Repository,false,false), Import(org.eclipse.egit.github.core.User,false,false)),List(ClassDef(PUBLIC,AccountDataManager,List(),List(),List(),List(ValDef(PRIVATE STATIC FINAL,TAG,List(),String,SimpleLiteral(String,AccountDataManager),false), ValDef(PRIVATE STATIC FINAL,EXECUTOR,List(),ClassType(Executor,NoType,List(),List()),FunctionCall(Ident(Executors),newFixedThreadPool,List(),List(SimpleLiteral(Int,10))),false), ValDef(PRIVATE STATIC FINAL,FORMAT_VERSION,List(),Int,SimpleLiteral(Int,4),false), ValDef(PRIVATE,context,List(Annotation(Inject,Map())),ClassType(Context,NoType,List(),List()),NoExpr,false), ValDef(PRIVATE,dbCache,List(Annotation(Inject,Map())),ClassType(DatabaseCache,NoType,List(),List()),NoExpr,false), ValDef(PRIVATE,allRepos,List(Annotation(Inject,Map())),ClassType(Factory,NoType,List(),List()),NoExpr,false), ValDef(PRIVATE,userAndOrgsResource,List(Annotation(Inject,Map())),ClassType(Organizations,NoType,List(),List()),NoExpr,false), ValDef(PRIVATE,root,List(Annotation(Inject,Map()), Annotation(Named,Map($$default -> SimpleLiteral(String,cacheDir)))),ClassType(File,NoType,List(),List()),NoExpr,false), FunctionDef(PUBLIC,getContext,List(),List(),List(),ClassType(Context,NoType,List(),List()),List(),Block(List(Return(Ident(context))))), FunctionDef(PRIVATE,read,List(Annotation(SuppressWarnings,Map($$default -> SimpleLiteral(String,unchecked)))),List(TypeDef(V,List(),List(),List())),List(ValDef(FINAL,file,List(),ClassType(File,NoType,List(),List()),NoExpr,false)),ClassType(V,NoType,List(),List()),List(),Block(List(ValDef(NoModifiers,start,List(),Long,FunctionCall(Ident(System),currentTimeMillis,List(),List()),false), ValDef(NoModifiers,length,List(),Long,FunctionCall(Ident(file),length,List(),List()),false), ValDef(NoModifiers,data,List(),ClassType(Object,NoType,List(),List()),FunctionCall(ConstructorCall(NoExpr,ClassType(RequestReader,NoType,List(),List()),List(),List(Ident(file), Ident(FORMAT_VERSION)),List()),read,List(),List()),false), If(BinaryOp(Ident(data),!=,NullLiteral),FunctionCall(Ident(Log),d,List(),List(Ident(TAG), FunctionCall(Ident(MessageFormat),format,List(),List(SimpleLiteral(String,Cache hit to {0}, {1} ms to load {2} bytes), FunctionCall(Ident(file),getName,List(),List()), BinaryOp(FunctionCall(Ident(System),currentTimeMillis,List(),List()),-,Ident(start)), Ident(length))))),NoStmt), Return(Cast(Ident(data),ClassType(V,NoType,List(),List())))))), FunctionDef(PRIVATE,write,List(),List(),List(ValDef(NoModifiers,file,List(),ClassType(File,NoType,List(),List()),NoExpr,false), ValDef(NoModifiers,data,List(),ClassType(Object,NoType,List(),List()),NoExpr,false)),ClassType(AccountDataManager,NoType,List(),List()),List(),Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(RequestWriter,NoType,List(),List()),List(),List(Ident(file), Ident(FORMAT_VERSION)),List()),write,List(),List(Ident(data))), Return(This(NoType))))), FunctionDef(PROTECTED,query,List(),List(),List(ValDef(NoModifiers,helper,List(),ClassType(SQLiteOpenHelper,NoType,List(),List()),NoExpr,false), ValDef(NoModifiers,tables,List(),String,NoExpr,false), ValDef(NoModifiers,columns,List(),ArrayType(String),NoExpr,false)),ClassType(Cursor,NoType,List(),List()),List(),Block(List(Return(FunctionCall(NoExpr,query,List(),List(Ident(helper), Ident(tables), Ident(columns), NullLiteral, NullLiteral)))))), FunctionDef(PROTECTED,query,List(),List(),List(ValDef(NoModifiers,helper,List(),ClassType(SQLiteOpenHelper,NoType,List(),List()),NoExpr,false), ValDef(NoModifiers,tables,List(),String,NoExpr,false), ValDef(NoModifiers,columns,List(),ArrayType(String),NoExpr,false), ValDef(NoModifiers,selection,List(),String,NoExpr,false), ValDef(NoModifiers,selectionArgs,List(),ArrayType(String),NoExpr,false)),ClassType(Cursor,NoType,List(),List()),List(),Block(List(ValDef(NoModifiers,builder,List(),ClassType(SQLiteQueryBuilder,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(SQLiteQueryBuilder,NoType,List(),List()),List(),List(),List()),false), FunctionCall(Ident(builder),setTables,List(),List(Ident(tables))), Return(FunctionCall(Ident(builder),query,List(),List(FunctionCall(Ident(helper),getReadableDatabase,List(),List()), Ident(columns), Ident(selection), Ident(selectionArgs), NullLiteral, NullLiteral, NullLiteral)))))), FunctionDef(PUBLIC,getOrgs,List(),List(),List(ValDef(NoModifiers,forceReload,List(),Boolean,NoExpr,false)),ClassType(List,NoType,List(),List(ClassType(User,NoType,List(),List()))),List(IOException),Block(List(Return(TernaryOp(Ident(forceReload),FunctionCall(Ident(dbCache),requestAndStore,List(),List(Ident(userAndOrgsResource))),FunctionCall(Ident(dbCache),loadOrRequest,List(),List(Ident(userAndOrgsResource)))))))), FunctionDef(PUBLIC,getRepos,List(),List(),List(ValDef(FINAL,user,List(),ClassType(User,NoType,List(),List()),NoExpr,false), ValDef(NoModifiers,forceReload,List(),Boolean,NoExpr,false)),ClassType(List,NoType,List(),List(ClassType(Repository,NoType,List(),List()))),List(IOException),Block(List(ValDef(NoModifiers,resource,List(),ClassType(OrganizationRepositories,NoType,List(),List()),FunctionCall(Ident(allRepos),under,List(),List(Ident(user))),false), Return(TernaryOp(Ident(forceReload),FunctionCall(Ident(dbCache),requestAndStore,List(),List(Ident(resource))),FunctionCall(Ident(dbCache),loadOrRequest,List(),List(Ident(resource)))))))), FunctionDef(PUBLIC,getIssueFilters,List(),List(),List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),Block(List(ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ValDef(NoModifiers,cached,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), If(BinaryOp(Ident(cached),!=,NullLiteral),Return(Ident(cached)),NoStmt), Return(FunctionCall(Ident(Collections),emptyList,List(),List()))))), FunctionDef(PUBLIC,getIssueFilters,List(),List(),List(ValDef(FINAL,requestFuture,List(),ClassType(RequestFuture,NoType,List(),List(ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))))),NoExpr,false)),Void,List(),Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(Exception),Block(List(Return(FunctionCall(NoExpr,getIssueFilters,List(),List()))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filters)))))))),execute,List(),List())))), FunctionDef(PUBLIC,addIssueFilter,List(),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(),Block(List(ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), If(BinaryOp(Ident(filters),==,NullLiteral),Assign(Ident(filters),ConstructorCall(NoExpr,ClassType(HashSet,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(),List()),None),NoStmt), If(FunctionCall(Ident(filters),add,List(),List(Ident(filter))),FunctionCall(NoExpr,write,List(),List(Ident(cache), Ident(filters))),NoStmt)))), FunctionDef(PUBLIC,addIssueFilter,List(),List(),List(ValDef(FINAL,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false), ValDef(FINAL,requestFuture,List(),ClassType(RequestFuture,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false)),Void,List(),Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(IssueFilter,NoType,List(),List()),List(Exception),Block(List(FunctionCall(NoExpr,addIssueFilter,List(),List(Ident(filter))), Return(Ident(filter))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter)))))), FunctionDef(PROTECTED,onException,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false)),Void,List(RuntimeException),Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception adding issue filter), Ident(e)))))))),execute,List(),List())))), FunctionDef(PUBLIC,removeIssueFilter,List(),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(),Block(List(ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), If(BinaryOp(BinaryOp(Ident(filters),!=,NullLiteral),&&,FunctionCall(Ident(filters),remove,List(),List(Ident(filter)))),FunctionCall(NoExpr,write,List(),List(Ident(cache), Ident(filters))),NoStmt)))), FunctionDef(PUBLIC,removeIssueFilter,List(),List(),List(ValDef(FINAL,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false), ValDef(FINAL,requestFuture,List(),ClassType(RequestFuture,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false)),Void,List(),Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(IssueFilter,NoType,List(),List()),List(Exception),Block(List(FunctionCall(NoExpr,removeIssueFilter,List(),List(Ident(filter))), Return(Ident(filter))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter)))))), FunctionDef(PROTECTED,onException,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false)),Void,List(RuntimeException),Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception removing issue filter), Ident(e)))))))),execute,List(),List()))))),false))), Import(android.accounts.Account,false,false), Import(android.content.Context,false,false), Import(android.database.Cursor,false,false), Import(android.database.sqlite.SQLiteOpenHelper,false,false), Import(android.database.sqlite.SQLiteQueryBuilder,false,false), Import(android.util.Log,false,false), Import(com.github.mobile.RequestFuture,false,false), Import(com.github.mobile.RequestReader,false,false), Import(com.github.mobile.RequestWriter,false,false), Import(com.github.mobile.accounts.AuthenticatedUserTask,false,false), Import(com.github.mobile.core.issue.IssueFilter,false,false), Import(com.github.mobile.persistence.OrganizationRepositories.Factory,false,false), Import(com.google.inject.Inject,false,false), Import(com.google.inject.name.Named,false,false), Import(java.io.File,false,false), Import(java.io.IOException,false,false), Import(java.text.MessageFormat,false,false), Import(java.util.Collection,false,false), Import(java.util.Collections,false,false), Import(java.util.HashSet,false,false), Import(java.util.List,false,false), Import(java.util.concurrent.Executor,false,false), Import(java.util.concurrent.Executors,false,false), Import(org.eclipse.egit.github.core.Repository,false,false), Import(org.eclipse.egit.github.core.User,false,false), ClassDef(PUBLIC,AccountDataManager,List(),List(),List(),List(ValDef(PRIVATE STATIC FINAL,TAG,List(),String,SimpleLiteral(String,AccountDataManager),false), ValDef(PRIVATE STATIC FINAL,EXECUTOR,List(),ClassType(Executor,NoType,List(),List()),FunctionCall(Ident(Executors),newFixedThreadPool,List(),List(SimpleLiteral(Int,10))),false), ValDef(PRIVATE STATIC FINAL,FORMAT_VERSION,List(),Int,SimpleLiteral(Int,4),false), ValDef(PRIVATE,context,List(Annotation(Inject,Map())),ClassType(Context,NoType,List(),List()),NoExpr,false), ValDef(PRIVATE,dbCache,List(Annotation(Inject,Map())),ClassType(DatabaseCache,NoType,List(),List()),NoExpr,false), ValDef(PRIVATE,allRepos,List(Annotation(Inject,Map())),ClassType(Factory,NoType,List(),List()),NoExpr,false), ValDef(PRIVATE,userAndOrgsResource,List(Annotation(Inject,Map())),ClassType(Organizations,NoType,List(),List()),NoExpr,false), ValDef(PRIVATE,root,List(Annotation(Inject,Map()), Annotation(Named,Map($$default -> SimpleLiteral(String,cacheDir)))),ClassType(File,NoType,List(),List()),NoExpr,false), FunctionDef(PUBLIC,getContext,List(),List(),List(),ClassType(Context,NoType,List(),List()),List(),Block(List(Return(Ident(context))))), FunctionDef(PRIVATE,read,List(Annotation(SuppressWarnings,Map($$default -> SimpleLiteral(String,unchecked)))),List(TypeDef(V,List(),List(),List())),List(ValDef(FINAL,file,List(),ClassType(File,NoType,List(),List()),NoExpr,false)),ClassType(V,NoType,List(),List()),List(),Block(List(ValDef(NoModifiers,start,List(),Long,FunctionCall(Ident(System),currentTimeMillis,List(),List()),false), ValDef(NoModifiers,length,List(),Long,FunctionCall(Ident(file),length,List(),List()),false), ValDef(NoModifiers,data,List(),ClassType(Object,NoType,List(),List()),FunctionCall(ConstructorCall(NoExpr,ClassType(RequestReader,NoType,List(),List()),List(),List(Ident(file), Ident(FORMAT_VERSION)),List()),read,List(),List()),false), If(BinaryOp(Ident(data),!=,NullLiteral),FunctionCall(Ident(Log),d,List(),List(Ident(TAG), FunctionCall(Ident(MessageFormat),format,List(),List(SimpleLiteral(String,Cache hit to {0}, {1} ms to load {2} bytes), FunctionCall(Ident(file),getName,List(),List()), BinaryOp(FunctionCall(Ident(System),currentTimeMillis,List(),List()),-,Ident(start)), Ident(length))))),NoStmt), Return(Cast(Ident(data),ClassType(V,NoType,List(),List())))))), FunctionDef(PRIVATE,write,List(),List(),List(ValDef(NoModifiers,file,List(),ClassType(File,NoType,List(),List()),NoExpr,false), ValDef(NoModifiers,data,List(),ClassType(Object,NoType,List(),List()),NoExpr,false)),ClassType(AccountDataManager,NoType,List(),List()),List(),Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(RequestWriter,NoType,List(),List()),List(),List(Ident(file), Ident(FORMAT_VERSION)),List()),write,List(),List(Ident(data))), Return(This(NoType))))), FunctionDef(PROTECTED,query,List(),List(),List(ValDef(NoModifiers,helper,List(),ClassType(SQLiteOpenHelper,NoType,List(),List()),NoExpr,false), ValDef(NoModifiers,tables,List(),String,NoExpr,false), ValDef(NoModifiers,columns,List(),ArrayType(String),NoExpr,false)),ClassType(Cursor,NoType,List(),List()),List(),Block(List(Return(FunctionCall(NoExpr,query,List(),List(Ident(helper), Ident(tables), Ident(columns), NullLiteral, NullLiteral)))))), FunctionDef(PROTECTED,query,List(),List(),List(ValDef(NoModifiers,helper,List(),ClassType(SQLiteOpenHelper,NoType,List(),List()),NoExpr,false), ValDef(NoModifiers,tables,List(),String,NoExpr,false), ValDef(NoModifiers,columns,List(),ArrayType(String),NoExpr,false), ValDef(NoModifiers,selection,List(),String,NoExpr,false), ValDef(NoModifiers,selectionArgs,List(),ArrayType(String),NoExpr,false)),ClassType(Cursor,NoType,List(),List()),List(),Block(List(ValDef(NoModifiers,builder,List(),ClassType(SQLiteQueryBuilder,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(SQLiteQueryBuilder,NoType,List(),List()),List(),List(),List()),false), FunctionCall(Ident(builder),setTables,List(),List(Ident(tables))), Return(FunctionCall(Ident(builder),query,List(),List(FunctionCall(Ident(helper),getReadableDatabase,List(),List()), Ident(columns), Ident(selection), Ident(selectionArgs), NullLiteral, NullLiteral, NullLiteral)))))), FunctionDef(PUBLIC,getOrgs,List(),List(),List(ValDef(NoModifiers,forceReload,List(),Boolean,NoExpr,false)),ClassType(List,NoType,List(),List(ClassType(User,NoType,List(),List()))),List(IOException),Block(List(Return(TernaryOp(Ident(forceReload),FunctionCall(Ident(dbCache),requestAndStore,List(),List(Ident(userAndOrgsResource))),FunctionCall(Ident(dbCache),loadOrRequest,List(),List(Ident(userAndOrgsResource)))))))), FunctionDef(PUBLIC,getRepos,List(),List(),List(ValDef(FINAL,user,List(),ClassType(User,NoType,List(),List()),NoExpr,false), ValDef(NoModifiers,forceReload,List(),Boolean,NoExpr,false)),ClassType(List,NoType,List(),List(ClassType(Repository,NoType,List(),List()))),List(IOException),Block(List(ValDef(NoModifiers,resource,List(),ClassType(OrganizationRepositories,NoType,List(),List()),FunctionCall(Ident(allRepos),under,List(),List(Ident(user))),false), Return(TernaryOp(Ident(forceReload),FunctionCall(Ident(dbCache),requestAndStore,List(),List(Ident(resource))),FunctionCall(Ident(dbCache),loadOrRequest,List(),List(Ident(resource)))))))), FunctionDef(PUBLIC,getIssueFilters,List(),List(),List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),Block(List(ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ValDef(NoModifiers,cached,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), If(BinaryOp(Ident(cached),!=,NullLiteral),Return(Ident(cached)),NoStmt), Return(FunctionCall(Ident(Collections),emptyList,List(),List()))))), FunctionDef(PUBLIC,getIssueFilters,List(),List(),List(ValDef(FINAL,requestFuture,List(),ClassType(RequestFuture,NoType,List(),List(ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))))),NoExpr,false)),Void,List(),Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(Exception),Block(List(Return(FunctionCall(NoExpr,getIssueFilters,List(),List()))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filters)))))))),execute,List(),List())))), FunctionDef(PUBLIC,addIssueFilter,List(),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(),Block(List(ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), If(BinaryOp(Ident(filters),==,NullLiteral),Assign(Ident(filters),ConstructorCall(NoExpr,ClassType(HashSet,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(),List()),None),NoStmt), If(FunctionCall(Ident(filters),add,List(),List(Ident(filter))),FunctionCall(NoExpr,write,List(),List(Ident(cache), Ident(filters))),NoStmt)))), FunctionDef(PUBLIC,addIssueFilter,List(),List(),List(ValDef(FINAL,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false), ValDef(FINAL,requestFuture,List(),ClassType(RequestFuture,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false)),Void,List(),Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(IssueFilter,NoType,List(),List()),List(Exception),Block(List(FunctionCall(NoExpr,addIssueFilter,List(),List(Ident(filter))), Return(Ident(filter))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter)))))), FunctionDef(PROTECTED,onException,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false)),Void,List(RuntimeException),Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception adding issue filter), Ident(e)))))))),execute,List(),List())))), FunctionDef(PUBLIC,removeIssueFilter,List(),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(),Block(List(ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), If(BinaryOp(BinaryOp(Ident(filters),!=,NullLiteral),&&,FunctionCall(Ident(filters),remove,List(),List(Ident(filter)))),FunctionCall(NoExpr,write,List(),List(Ident(cache), Ident(filters))),NoStmt)))), FunctionDef(PUBLIC,removeIssueFilter,List(),List(),List(ValDef(FINAL,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false), ValDef(FINAL,requestFuture,List(),ClassType(RequestFuture,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false)),Void,List(),Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(IssueFilter,NoType,List(),List()),List(Exception),Block(List(FunctionCall(NoExpr,removeIssueFilter,List(),List(Ident(filter))), Return(Ident(filter))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter)))))), FunctionDef(PROTECTED,onException,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false)),Void,List(RuntimeException),Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception removing issue filter), Ident(e)))))))),execute,List(),List()))))),false), ValDef(PRIVATE STATIC FINAL,TAG,List(),String,SimpleLiteral(String,AccountDataManager),false), String, SimpleLiteral(String,AccountDataManager), String, ValDef(PRIVATE STATIC FINAL,EXECUTOR,List(),ClassType(Executor,NoType,List(),List()),FunctionCall(Ident(Executors),newFixedThreadPool,List(),List(SimpleLiteral(Int,10))),false), ClassType(Executor,NoType,List(),List()), NoType, FunctionCall(Ident(Executors),newFixedThreadPool,List(),List(SimpleLiteral(Int,10))), Ident(Executors), SimpleLiteral(Int,10), Int, ValDef(PRIVATE STATIC FINAL,FORMAT_VERSION,List(),Int,SimpleLiteral(Int,4),false), Int, SimpleLiteral(Int,4), Int, ValDef(PRIVATE,context,List(Annotation(Inject,Map())),ClassType(Context,NoType,List(),List()),NoExpr,false), Annotation(Inject,Map()), ClassType(Context,NoType,List(),List()), NoType, NoExpr, ValDef(PRIVATE,dbCache,List(Annotation(Inject,Map())),ClassType(DatabaseCache,NoType,List(),List()),NoExpr,false), Annotation(Inject,Map()), ClassType(DatabaseCache,NoType,List(),List()), NoType, NoExpr, ValDef(PRIVATE,allRepos,List(Annotation(Inject,Map())),ClassType(Factory,NoType,List(),List()),NoExpr,false), Annotation(Inject,Map()), ClassType(Factory,NoType,List(),List()), NoType, NoExpr, ValDef(PRIVATE,userAndOrgsResource,List(Annotation(Inject,Map())),ClassType(Organizations,NoType,List(),List()),NoExpr,false), Annotation(Inject,Map()), ClassType(Organizations,NoType,List(),List()), NoType, NoExpr, ValDef(PRIVATE,root,List(Annotation(Inject,Map()), Annotation(Named,Map($$default -> SimpleLiteral(String,cacheDir)))),ClassType(File,NoType,List(),List()),NoExpr,false), Annotation(Inject,Map()), Annotation(Named,Map($$default -> SimpleLiteral(String,cacheDir))), SimpleLiteral(String,cacheDir), String, ClassType(File,NoType,List(),List()), NoType, NoExpr, FunctionDef(PUBLIC,getContext,List(),List(),List(),ClassType(Context,NoType,List(),List()),List(),Block(List(Return(Ident(context))))), ClassType(Context,NoType,List(),List()), NoType, Block(List(Return(Ident(context)))), Return(Ident(context)), Ident(context), FunctionDef(PRIVATE,read,List(Annotation(SuppressWarnings,Map($$default -> SimpleLiteral(String,unchecked)))),List(TypeDef(V,List(),List(),List())),List(ValDef(FINAL,file,List(),ClassType(File,NoType,List(),List()),NoExpr,false)),ClassType(V,NoType,List(),List()),List(),Block(List(ValDef(NoModifiers,start,List(),Long,FunctionCall(Ident(System),currentTimeMillis,List(),List()),false), ValDef(NoModifiers,length,List(),Long,FunctionCall(Ident(file),length,List(),List()),false), ValDef(NoModifiers,data,List(),ClassType(Object,NoType,List(),List()),FunctionCall(ConstructorCall(NoExpr,ClassType(RequestReader,NoType,List(),List()),List(),List(Ident(file), Ident(FORMAT_VERSION)),List()),read,List(),List()),false), If(BinaryOp(Ident(data),!=,NullLiteral),FunctionCall(Ident(Log),d,List(),List(Ident(TAG), FunctionCall(Ident(MessageFormat),format,List(),List(SimpleLiteral(String,Cache hit to {0}, {1} ms to load {2} bytes), FunctionCall(Ident(file),getName,List(),List()), BinaryOp(FunctionCall(Ident(System),currentTimeMillis,List(),List()),-,Ident(start)), Ident(length))))),NoStmt), Return(Cast(Ident(data),ClassType(V,NoType,List(),List())))))), Annotation(SuppressWarnings,Map($$default -> SimpleLiteral(String,unchecked))), SimpleLiteral(String,unchecked), String, TypeDef(V,List(),List(),List()), ValDef(FINAL,file,List(),ClassType(File,NoType,List(),List()),NoExpr,false), ClassType(File,NoType,List(),List()), NoType, NoExpr, ClassType(V,NoType,List(),List()), NoType, Block(List(ValDef(NoModifiers,start,List(),Long,FunctionCall(Ident(System),currentTimeMillis,List(),List()),false), ValDef(NoModifiers,length,List(),Long,FunctionCall(Ident(file),length,List(),List()),false), ValDef(NoModifiers,data,List(),ClassType(Object,NoType,List(),List()),FunctionCall(ConstructorCall(NoExpr,ClassType(RequestReader,NoType,List(),List()),List(),List(Ident(file), Ident(FORMAT_VERSION)),List()),read,List(),List()),false), If(BinaryOp(Ident(data),!=,NullLiteral),FunctionCall(Ident(Log),d,List(),List(Ident(TAG), FunctionCall(Ident(MessageFormat),format,List(),List(SimpleLiteral(String,Cache hit to {0}, {1} ms to load {2} bytes), FunctionCall(Ident(file),getName,List(),List()), BinaryOp(FunctionCall(Ident(System),currentTimeMillis,List(),List()),-,Ident(start)), Ident(length))))),NoStmt), Return(Cast(Ident(data),ClassType(V,NoType,List(),List()))))), ValDef(NoModifiers,start,List(),Long,FunctionCall(Ident(System),currentTimeMillis,List(),List()),false), Long, FunctionCall(Ident(System),currentTimeMillis,List(),List()), Ident(System), ValDef(NoModifiers,length,List(),Long,FunctionCall(Ident(file),length,List(),List()),false), Long, FunctionCall(Ident(file),length,List(),List()), Ident(file), ValDef(NoModifiers,data,List(),ClassType(Object,NoType,List(),List()),FunctionCall(ConstructorCall(NoExpr,ClassType(RequestReader,NoType,List(),List()),List(),List(Ident(file), Ident(FORMAT_VERSION)),List()),read,List(),List()),false), ClassType(Object,NoType,List(),List()), NoType, FunctionCall(ConstructorCall(NoExpr,ClassType(RequestReader,NoType,List(),List()),List(),List(Ident(file), Ident(FORMAT_VERSION)),List()),read,List(),List()), ConstructorCall(NoExpr,ClassType(RequestReader,NoType,List(),List()),List(),List(Ident(file), Ident(FORMAT_VERSION)),List()), NoExpr, ClassType(RequestReader,NoType,List(),List()), NoType, Ident(file), Ident(FORMAT_VERSION), If(BinaryOp(Ident(data),!=,NullLiteral),FunctionCall(Ident(Log),d,List(),List(Ident(TAG), FunctionCall(Ident(MessageFormat),format,List(),List(SimpleLiteral(String,Cache hit to {0}, {1} ms to load {2} bytes), FunctionCall(Ident(file),getName,List(),List()), BinaryOp(FunctionCall(Ident(System),currentTimeMillis,List(),List()),-,Ident(start)), Ident(length))))),NoStmt), BinaryOp(Ident(data),!=,NullLiteral), Ident(data), NullLiteral, FunctionCall(Ident(Log),d,List(),List(Ident(TAG), FunctionCall(Ident(MessageFormat),format,List(),List(SimpleLiteral(String,Cache hit to {0}, {1} ms to load {2} bytes), FunctionCall(Ident(file),getName,List(),List()), BinaryOp(FunctionCall(Ident(System),currentTimeMillis,List(),List()),-,Ident(start)), Ident(length))))), Ident(Log), Ident(TAG), FunctionCall(Ident(MessageFormat),format,List(),List(SimpleLiteral(String,Cache hit to {0}, {1} ms to load {2} bytes), FunctionCall(Ident(file),getName,List(),List()), BinaryOp(FunctionCall(Ident(System),currentTimeMillis,List(),List()),-,Ident(start)), Ident(length))), Ident(MessageFormat), SimpleLiteral(String,Cache hit to {0}, {1} ms to load {2} bytes), String, FunctionCall(Ident(file),getName,List(),List()), Ident(file), BinaryOp(FunctionCall(Ident(System),currentTimeMillis,List(),List()),-,Ident(start)), FunctionCall(Ident(System),currentTimeMillis,List(),List()), Ident(System), Ident(start), Ident(length), NoStmt, Return(Cast(Ident(data),ClassType(V,NoType,List(),List()))), Cast(Ident(data),ClassType(V,NoType,List(),List())), Ident(data), ClassType(V,NoType,List(),List()), NoType, FunctionDef(PRIVATE,write,List(),List(),List(ValDef(NoModifiers,file,List(),ClassType(File,NoType,List(),List()),NoExpr,false), ValDef(NoModifiers,data,List(),ClassType(Object,NoType,List(),List()),NoExpr,false)),ClassType(AccountDataManager,NoType,List(),List()),List(),Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(RequestWriter,NoType,List(),List()),List(),List(Ident(file), Ident(FORMAT_VERSION)),List()),write,List(),List(Ident(data))), Return(This(NoType))))), ValDef(NoModifiers,file,List(),ClassType(File,NoType,List(),List()),NoExpr,false), ClassType(File,NoType,List(),List()), NoType, NoExpr, ValDef(NoModifiers,data,List(),ClassType(Object,NoType,List(),List()),NoExpr,false), ClassType(Object,NoType,List(),List()), NoType, NoExpr, ClassType(AccountDataManager,NoType,List(),List()), NoType, Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(RequestWriter,NoType,List(),List()),List(),List(Ident(file), Ident(FORMAT_VERSION)),List()),write,List(),List(Ident(data))), Return(This(NoType)))), FunctionCall(ConstructorCall(NoExpr,ClassType(RequestWriter,NoType,List(),List()),List(),List(Ident(file), Ident(FORMAT_VERSION)),List()),write,List(),List(Ident(data))), ConstructorCall(NoExpr,ClassType(RequestWriter,NoType,List(),List()),List(),List(Ident(file), Ident(FORMAT_VERSION)),List()), NoExpr, ClassType(RequestWriter,NoType,List(),List()), NoType, Ident(file), Ident(FORMAT_VERSION), Ident(data), Return(This(NoType)), This(NoType), NoType, FunctionDef(PROTECTED,query,List(),List(),List(ValDef(NoModifiers,helper,List(),ClassType(SQLiteOpenHelper,NoType,List(),List()),NoExpr,false), ValDef(NoModifiers,tables,List(),String,NoExpr,false), ValDef(NoModifiers,columns,List(),ArrayType(String),NoExpr,false)),ClassType(Cursor,NoType,List(),List()),List(),Block(List(Return(FunctionCall(NoExpr,query,List(),List(Ident(helper), Ident(tables), Ident(columns), NullLiteral, NullLiteral)))))), ValDef(NoModifiers,helper,List(),ClassType(SQLiteOpenHelper,NoType,List(),List()),NoExpr,false), ClassType(SQLiteOpenHelper,NoType,List(),List()), NoType, NoExpr, ValDef(NoModifiers,tables,List(),String,NoExpr,false), String, NoExpr, ValDef(NoModifiers,columns,List(),ArrayType(String),NoExpr,false), ArrayType(String), String, NoExpr, ClassType(Cursor,NoType,List(),List()), NoType, Block(List(Return(FunctionCall(NoExpr,query,List(),List(Ident(helper), Ident(tables), Ident(columns), NullLiteral, NullLiteral))))), Return(FunctionCall(NoExpr,query,List(),List(Ident(helper), Ident(tables), Ident(columns), NullLiteral, NullLiteral))), FunctionCall(NoExpr,query,List(),List(Ident(helper), Ident(tables), Ident(columns), NullLiteral, NullLiteral)), NoExpr, Ident(helper), Ident(tables), Ident(columns), NullLiteral, NullLiteral, FunctionDef(PROTECTED,query,List(),List(),List(ValDef(NoModifiers,helper,List(),ClassType(SQLiteOpenHelper,NoType,List(),List()),NoExpr,false), ValDef(NoModifiers,tables,List(),String,NoExpr,false), ValDef(NoModifiers,columns,List(),ArrayType(String),NoExpr,false), ValDef(NoModifiers,selection,List(),String,NoExpr,false), ValDef(NoModifiers,selectionArgs,List(),ArrayType(String),NoExpr,false)),ClassType(Cursor,NoType,List(),List()),List(),Block(List(ValDef(NoModifiers,builder,List(),ClassType(SQLiteQueryBuilder,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(SQLiteQueryBuilder,NoType,List(),List()),List(),List(),List()),false), FunctionCall(Ident(builder),setTables,List(),List(Ident(tables))), Return(FunctionCall(Ident(builder),query,List(),List(FunctionCall(Ident(helper),getReadableDatabase,List(),List()), Ident(columns), Ident(selection), Ident(selectionArgs), NullLiteral, NullLiteral, NullLiteral)))))), ValDef(NoModifiers,helper,List(),ClassType(SQLiteOpenHelper,NoType,List(),List()),NoExpr,false), ClassType(SQLiteOpenHelper,NoType,List(),List()), NoType, NoExpr, ValDef(NoModifiers,tables,List(),String,NoExpr,false), String, NoExpr, ValDef(NoModifiers,columns,List(),ArrayType(String),NoExpr,false), ArrayType(String), String, NoExpr, ValDef(NoModifiers,selection,List(),String,NoExpr,false), String, NoExpr, ValDef(NoModifiers,selectionArgs,List(),ArrayType(String),NoExpr,false), ArrayType(String), String, NoExpr, ClassType(Cursor,NoType,List(),List()), NoType, Block(List(ValDef(NoModifiers,builder,List(),ClassType(SQLiteQueryBuilder,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(SQLiteQueryBuilder,NoType,List(),List()),List(),List(),List()),false), FunctionCall(Ident(builder),setTables,List(),List(Ident(tables))), Return(FunctionCall(Ident(builder),query,List(),List(FunctionCall(Ident(helper),getReadableDatabase,List(),List()), Ident(columns), Ident(selection), Ident(selectionArgs), NullLiteral, NullLiteral, NullLiteral))))), ValDef(NoModifiers,builder,List(),ClassType(SQLiteQueryBuilder,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(SQLiteQueryBuilder,NoType,List(),List()),List(),List(),List()),false), ClassType(SQLiteQueryBuilder,NoType,List(),List()), NoType, ConstructorCall(NoExpr,ClassType(SQLiteQueryBuilder,NoType,List(),List()),List(),List(),List()), NoExpr, ClassType(SQLiteQueryBuilder,NoType,List(),List()), NoType, FunctionCall(Ident(builder),setTables,List(),List(Ident(tables))), Ident(builder), Ident(tables), Return(FunctionCall(Ident(builder),query,List(),List(FunctionCall(Ident(helper),getReadableDatabase,List(),List()), Ident(columns), Ident(selection), Ident(selectionArgs), NullLiteral, NullLiteral, NullLiteral))), FunctionCall(Ident(builder),query,List(),List(FunctionCall(Ident(helper),getReadableDatabase,List(),List()), Ident(columns), Ident(selection), Ident(selectionArgs), NullLiteral, NullLiteral, NullLiteral)), Ident(builder), FunctionCall(Ident(helper),getReadableDatabase,List(),List()), Ident(helper), Ident(columns), Ident(selection), Ident(selectionArgs), NullLiteral, NullLiteral, NullLiteral, FunctionDef(PUBLIC,getOrgs,List(),List(),List(ValDef(NoModifiers,forceReload,List(),Boolean,NoExpr,false)),ClassType(List,NoType,List(),List(ClassType(User,NoType,List(),List()))),List(IOException),Block(List(Return(TernaryOp(Ident(forceReload),FunctionCall(Ident(dbCache),requestAndStore,List(),List(Ident(userAndOrgsResource))),FunctionCall(Ident(dbCache),loadOrRequest,List(),List(Ident(userAndOrgsResource)))))))), ValDef(NoModifiers,forceReload,List(),Boolean,NoExpr,false), Boolean, NoExpr, ClassType(List,NoType,List(),List(ClassType(User,NoType,List(),List()))), NoType, ClassType(User,NoType,List(),List()), NoType, Block(List(Return(TernaryOp(Ident(forceReload),FunctionCall(Ident(dbCache),requestAndStore,List(),List(Ident(userAndOrgsResource))),FunctionCall(Ident(dbCache),loadOrRequest,List(),List(Ident(userAndOrgsResource))))))), Return(TernaryOp(Ident(forceReload),FunctionCall(Ident(dbCache),requestAndStore,List(),List(Ident(userAndOrgsResource))),FunctionCall(Ident(dbCache),loadOrRequest,List(),List(Ident(userAndOrgsResource))))), TernaryOp(Ident(forceReload),FunctionCall(Ident(dbCache),requestAndStore,List(),List(Ident(userAndOrgsResource))),FunctionCall(Ident(dbCache),loadOrRequest,List(),List(Ident(userAndOrgsResource)))), Ident(forceReload), FunctionCall(Ident(dbCache),requestAndStore,List(),List(Ident(userAndOrgsResource))), Ident(dbCache), Ident(userAndOrgsResource), FunctionCall(Ident(dbCache),loadOrRequest,List(),List(Ident(userAndOrgsResource))), Ident(dbCache), Ident(userAndOrgsResource), FunctionDef(PUBLIC,getRepos,List(),List(),List(ValDef(FINAL,user,List(),ClassType(User,NoType,List(),List()),NoExpr,false), ValDef(NoModifiers,forceReload,List(),Boolean,NoExpr,false)),ClassType(List,NoType,List(),List(ClassType(Repository,NoType,List(),List()))),List(IOException),Block(List(ValDef(NoModifiers,resource,List(),ClassType(OrganizationRepositories,NoType,List(),List()),FunctionCall(Ident(allRepos),under,List(),List(Ident(user))),false), Return(TernaryOp(Ident(forceReload),FunctionCall(Ident(dbCache),requestAndStore,List(),List(Ident(resource))),FunctionCall(Ident(dbCache),loadOrRequest,List(),List(Ident(resource)))))))), ValDef(FINAL,user,List(),ClassType(User,NoType,List(),List()),NoExpr,false), ClassType(User,NoType,List(),List()), NoType, NoExpr, ValDef(NoModifiers,forceReload,List(),Boolean,NoExpr,false), Boolean, NoExpr, ClassType(List,NoType,List(),List(ClassType(Repository,NoType,List(),List()))), NoType, ClassType(Repository,NoType,List(),List()), NoType, Block(List(ValDef(NoModifiers,resource,List(),ClassType(OrganizationRepositories,NoType,List(),List()),FunctionCall(Ident(allRepos),under,List(),List(Ident(user))),false), Return(TernaryOp(Ident(forceReload),FunctionCall(Ident(dbCache),requestAndStore,List(),List(Ident(resource))),FunctionCall(Ident(dbCache),loadOrRequest,List(),List(Ident(resource))))))), ValDef(NoModifiers,resource,List(),ClassType(OrganizationRepositories,NoType,List(),List()),FunctionCall(Ident(allRepos),under,List(),List(Ident(user))),false), ClassType(OrganizationRepositories,NoType,List(),List()), NoType, FunctionCall(Ident(allRepos),under,List(),List(Ident(user))), Ident(allRepos), Ident(user), Return(TernaryOp(Ident(forceReload),FunctionCall(Ident(dbCache),requestAndStore,List(),List(Ident(resource))),FunctionCall(Ident(dbCache),loadOrRequest,List(),List(Ident(resource))))), TernaryOp(Ident(forceReload),FunctionCall(Ident(dbCache),requestAndStore,List(),List(Ident(resource))),FunctionCall(Ident(dbCache),loadOrRequest,List(),List(Ident(resource)))), Ident(forceReload), FunctionCall(Ident(dbCache),requestAndStore,List(),List(Ident(resource))), Ident(dbCache), Ident(resource), FunctionCall(Ident(dbCache),loadOrRequest,List(),List(Ident(resource))), Ident(dbCache), Ident(resource), FunctionDef(PUBLIC,getIssueFilters,List(),List(),List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),Block(List(ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ValDef(NoModifiers,cached,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), If(BinaryOp(Ident(cached),!=,NullLiteral),Return(Ident(cached)),NoStmt), Return(FunctionCall(Ident(Collections),emptyList,List(),List()))))), ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))), NoType, ClassType(IssueFilter,NoType,List(),List()), NoType, Block(List(ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ValDef(NoModifiers,cached,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), If(BinaryOp(Ident(cached),!=,NullLiteral),Return(Ident(cached)),NoStmt), Return(FunctionCall(Ident(Collections),emptyList,List(),List())))), ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ClassType(File,NoType,List(),List()), NoType, ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()), NoExpr, ClassType(File,NoType,List(),List()), NoType, Ident(root), SimpleLiteral(String,issue_filters.ser), String, ValDef(NoModifiers,cached,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))), NoType, ClassType(IssueFilter,NoType,List(),List()), NoType, FunctionCall(NoExpr,read,List(),List(Ident(cache))), NoExpr, Ident(cache), If(BinaryOp(Ident(cached),!=,NullLiteral),Return(Ident(cached)),NoStmt), BinaryOp(Ident(cached),!=,NullLiteral), Ident(cached), NullLiteral, Return(Ident(cached)), Ident(cached), NoStmt, Return(FunctionCall(Ident(Collections),emptyList,List(),List())), FunctionCall(Ident(Collections),emptyList,List(),List()), Ident(Collections), FunctionDef(PUBLIC,getIssueFilters,List(),List(),List(ValDef(FINAL,requestFuture,List(),ClassType(RequestFuture,NoType,List(),List(ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))))),NoExpr,false)),Void,List(),Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(Exception),Block(List(Return(FunctionCall(NoExpr,getIssueFilters,List(),List()))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filters)))))))),execute,List(),List())))), ValDef(FINAL,requestFuture,List(),ClassType(RequestFuture,NoType,List(),List(ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))))),NoExpr,false), ClassType(RequestFuture,NoType,List(),List(ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))))), NoType, ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))), NoType, ClassType(IssueFilter,NoType,List(),List()), NoType, NoExpr, Void, Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(Exception),Block(List(Return(FunctionCall(NoExpr,getIssueFilters,List(),List()))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filters)))))))),execute,List(),List()))), FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(Exception),Block(List(Return(FunctionCall(NoExpr,getIssueFilters,List(),List()))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filters)))))))),execute,List(),List()), ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(Exception),Block(List(Return(FunctionCall(NoExpr,getIssueFilters,List(),List()))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filters)))))))), NoExpr, ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))))), NoType, ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))), NoType, ClassType(IssueFilter,NoType,List(),List()), NoType, Ident(context), Ident(EXECUTOR), FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(Exception),Block(List(Return(FunctionCall(NoExpr,getIssueFilters,List(),List()))))), Annotation(Override,Map()), ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false), ClassType(Account,NoType,List(),List()), NoType, NoExpr, ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))), NoType, ClassType(IssueFilter,NoType,List(),List()), NoType, Block(List(Return(FunctionCall(NoExpr,getIssueFilters,List(),List())))), Return(FunctionCall(NoExpr,getIssueFilters,List(),List())), FunctionCall(NoExpr,getIssueFilters,List(),List()), NoExpr, FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filters)))))), Annotation(Override,Map()), ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false), ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))), NoType, ClassType(IssueFilter,NoType,List(),List()), NoType, NoExpr, Void, Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filters))))), FunctionCall(Ident(requestFuture),success,List(),List(Ident(filters))), Ident(requestFuture), Ident(filters), FunctionDef(PUBLIC,addIssueFilter,List(),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(),Block(List(ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), If(BinaryOp(Ident(filters),==,NullLiteral),Assign(Ident(filters),ConstructorCall(NoExpr,ClassType(HashSet,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(),List()),None),NoStmt), If(FunctionCall(Ident(filters),add,List(),List(Ident(filter))),FunctionCall(NoExpr,write,List(),List(Ident(cache), Ident(filters))),NoStmt)))), ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false), ClassType(IssueFilter,NoType,List(),List()), NoType, NoExpr, Void, Block(List(ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), If(BinaryOp(Ident(filters),==,NullLiteral),Assign(Ident(filters),ConstructorCall(NoExpr,ClassType(HashSet,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(),List()),None),NoStmt), If(FunctionCall(Ident(filters),add,List(),List(Ident(filter))),FunctionCall(NoExpr,write,List(),List(Ident(cache), Ident(filters))),NoStmt))), ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ClassType(File,NoType,List(),List()), NoType, ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()), NoExpr, ClassType(File,NoType,List(),List()), NoType, Ident(root), SimpleLiteral(String,issue_filters.ser), String, ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))), NoType, ClassType(IssueFilter,NoType,List(),List()), NoType, FunctionCall(NoExpr,read,List(),List(Ident(cache))), NoExpr, Ident(cache), If(BinaryOp(Ident(filters),==,NullLiteral),Assign(Ident(filters),ConstructorCall(NoExpr,ClassType(HashSet,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(),List()),None),NoStmt), BinaryOp(Ident(filters),==,NullLiteral), Ident(filters), NullLiteral, Assign(Ident(filters),ConstructorCall(NoExpr,ClassType(HashSet,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(),List()),None), Ident(filters), ConstructorCall(NoExpr,ClassType(HashSet,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(),List()), NoExpr, ClassType(HashSet,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))), NoType, ClassType(IssueFilter,NoType,List(),List()), NoType, NoStmt, If(FunctionCall(Ident(filters),add,List(),List(Ident(filter))),FunctionCall(NoExpr,write,List(),List(Ident(cache), Ident(filters))),NoStmt), FunctionCall(Ident(filters),add,List(),List(Ident(filter))), Ident(filters), Ident(filter), FunctionCall(NoExpr,write,List(),List(Ident(cache), Ident(filters))), NoExpr, Ident(cache), Ident(filters), NoStmt, FunctionDef(PUBLIC,addIssueFilter,List(),List(),List(ValDef(FINAL,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false), ValDef(FINAL,requestFuture,List(),ClassType(RequestFuture,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false)),Void,List(),Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(IssueFilter,NoType,List(),List()),List(Exception),Block(List(FunctionCall(NoExpr,addIssueFilter,List(),List(Ident(filter))), Return(Ident(filter))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter)))))), FunctionDef(PROTECTED,onException,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false)),Void,List(RuntimeException),Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception adding issue filter), Ident(e)))))))),execute,List(),List())))), ValDef(FINAL,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false), ClassType(IssueFilter,NoType,List(),List()), NoType, NoExpr, ValDef(FINAL,requestFuture,List(),ClassType(RequestFuture,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false), ClassType(RequestFuture,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))), NoType, ClassType(IssueFilter,NoType,List(),List()), NoType, NoExpr, Void, Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(IssueFilter,NoType,List(),List()),List(Exception),Block(List(FunctionCall(NoExpr,addIssueFilter,List(),List(Ident(filter))), Return(Ident(filter))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter)))))), FunctionDef(PROTECTED,onException,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false)),Void,List(RuntimeException),Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception adding issue filter), Ident(e)))))))),execute,List(),List()))), FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(IssueFilter,NoType,List(),List()),List(Exception),Block(List(FunctionCall(NoExpr,addIssueFilter,List(),List(Ident(filter))), Return(Ident(filter))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter)))))), FunctionDef(PROTECTED,onException,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false)),Void,List(RuntimeException),Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception adding issue filter), Ident(e)))))))),execute,List(),List()), ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(IssueFilter,NoType,List(),List()),List(Exception),Block(List(FunctionCall(NoExpr,addIssueFilter,List(),List(Ident(filter))), Return(Ident(filter))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter)))))), FunctionDef(PROTECTED,onException,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false)),Void,List(RuntimeException),Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception adding issue filter), Ident(e)))))))), NoExpr, ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))), NoType, ClassType(IssueFilter,NoType,List(),List()), NoType, Ident(context), Ident(EXECUTOR), FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(IssueFilter,NoType,List(),List()),List(Exception),Block(List(FunctionCall(NoExpr,addIssueFilter,List(),List(Ident(filter))), Return(Ident(filter))))), Annotation(Override,Map()), ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false), ClassType(Account,NoType,List(),List()), NoType, NoExpr, ClassType(IssueFilter,NoType,List(),List()), NoType, Block(List(FunctionCall(NoExpr,addIssueFilter,List(),List(Ident(filter))), Return(Ident(filter)))), FunctionCall(NoExpr,addIssueFilter,List(),List(Ident(filter))), NoExpr, Ident(filter), Return(Ident(filter)), Ident(filter), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter)))))), Annotation(Override,Map()), ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false), ClassType(IssueFilter,NoType,List(),List()), NoType, NoExpr, Void, Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter))))), FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter))), Ident(requestFuture), Ident(filter), FunctionDef(PROTECTED,onException,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false)),Void,List(RuntimeException),Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception adding issue filter), Ident(e)))))), Annotation(Override,Map()), ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false), ClassType(Exception,NoType,List(),List()), NoType, NoExpr, Void, Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception adding issue filter), Ident(e))))), FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception adding issue filter), Ident(e))), Ident(Log), Ident(TAG), SimpleLiteral(String,Exception adding issue filter), String, Ident(e), FunctionDef(PUBLIC,removeIssueFilter,List(),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(),Block(List(ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), If(BinaryOp(BinaryOp(Ident(filters),!=,NullLiteral),&&,FunctionCall(Ident(filters),remove,List(),List(Ident(filter)))),FunctionCall(NoExpr,write,List(),List(Ident(cache), Ident(filters))),NoStmt)))), ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false), ClassType(IssueFilter,NoType,List(),List()), NoType, NoExpr, Void, Block(List(ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), If(BinaryOp(BinaryOp(Ident(filters),!=,NullLiteral),&&,FunctionCall(Ident(filters),remove,List(),List(Ident(filter)))),FunctionCall(NoExpr,write,List(),List(Ident(cache), Ident(filters))),NoStmt))), ValDef(FINAL,cache,List(),ClassType(File,NoType,List(),List()),ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()),false), ClassType(File,NoType,List(),List()), NoType, ConstructorCall(NoExpr,ClassType(File,NoType,List(),List()),List(),List(Ident(root), SimpleLiteral(String,issue_filters.ser)),List()), NoExpr, ClassType(File,NoType,List(),List()), NoType, Ident(root), SimpleLiteral(String,issue_filters.ser), String, ValDef(NoModifiers,filters,List(),ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),FunctionCall(NoExpr,read,List(),List(Ident(cache))),false), ClassType(Collection,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))), NoType, ClassType(IssueFilter,NoType,List(),List()), NoType, FunctionCall(NoExpr,read,List(),List(Ident(cache))), NoExpr, Ident(cache), If(BinaryOp(BinaryOp(Ident(filters),!=,NullLiteral),&&,FunctionCall(Ident(filters),remove,List(),List(Ident(filter)))),FunctionCall(NoExpr,write,List(),List(Ident(cache), Ident(filters))),NoStmt), BinaryOp(BinaryOp(Ident(filters),!=,NullLiteral),&&,FunctionCall(Ident(filters),remove,List(),List(Ident(filter)))), BinaryOp(Ident(filters),!=,NullLiteral), Ident(filters), NullLiteral, FunctionCall(Ident(filters),remove,List(),List(Ident(filter))), Ident(filters), Ident(filter), FunctionCall(NoExpr,write,List(),List(Ident(cache), Ident(filters))), NoExpr, Ident(cache), Ident(filters), NoStmt, FunctionDef(PUBLIC,removeIssueFilter,List(),List(),List(ValDef(FINAL,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false), ValDef(FINAL,requestFuture,List(),ClassType(RequestFuture,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false)),Void,List(),Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(IssueFilter,NoType,List(),List()),List(Exception),Block(List(FunctionCall(NoExpr,removeIssueFilter,List(),List(Ident(filter))), Return(Ident(filter))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter)))))), FunctionDef(PROTECTED,onException,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false)),Void,List(RuntimeException),Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception removing issue filter), Ident(e)))))))),execute,List(),List())))), ValDef(FINAL,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false), ClassType(IssueFilter,NoType,List(),List()), NoType, NoExpr, ValDef(FINAL,requestFuture,List(),ClassType(RequestFuture,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),NoExpr,false), ClassType(RequestFuture,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))), NoType, ClassType(IssueFilter,NoType,List(),List()), NoType, NoExpr, Void, Block(List(FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(IssueFilter,NoType,List(),List()),List(Exception),Block(List(FunctionCall(NoExpr,removeIssueFilter,List(),List(Ident(filter))), Return(Ident(filter))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter)))))), FunctionDef(PROTECTED,onException,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false)),Void,List(RuntimeException),Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception removing issue filter), Ident(e)))))))),execute,List(),List()))), FunctionCall(ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(IssueFilter,NoType,List(),List()),List(Exception),Block(List(FunctionCall(NoExpr,removeIssueFilter,List(),List(Ident(filter))), Return(Ident(filter))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter)))))), FunctionDef(PROTECTED,onException,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false)),Void,List(RuntimeException),Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception removing issue filter), Ident(e)))))))),execute,List(),List()), ConstructorCall(NoExpr,ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))),List(),List(Ident(context), Ident(EXECUTOR)),List(FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(IssueFilter,NoType,List(),List()),List(Exception),Block(List(FunctionCall(NoExpr,removeIssueFilter,List(),List(Ident(filter))), Return(Ident(filter))))), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter)))))), FunctionDef(PROTECTED,onException,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false)),Void,List(RuntimeException),Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception removing issue filter), Ident(e)))))))), NoExpr, ClassType(AuthenticatedUserTask,NoType,List(),List(ClassType(IssueFilter,NoType,List(),List()))), NoType, ClassType(IssueFilter,NoType,List(),List()), NoType, Ident(context), Ident(EXECUTOR), FunctionDef(PUBLIC,run,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false)),ClassType(IssueFilter,NoType,List(),List()),List(Exception),Block(List(FunctionCall(NoExpr,removeIssueFilter,List(),List(Ident(filter))), Return(Ident(filter))))), Annotation(Override,Map()), ValDef(NoModifiers,account,List(),ClassType(Account,NoType,List(),List()),NoExpr,false), ClassType(Account,NoType,List(),List()), NoType, NoExpr, ClassType(IssueFilter,NoType,List(),List()), NoType, Block(List(FunctionCall(NoExpr,removeIssueFilter,List(),List(Ident(filter))), Return(Ident(filter)))), FunctionCall(NoExpr,removeIssueFilter,List(),List(Ident(filter))), NoExpr, Ident(filter), Return(Ident(filter)), Ident(filter), FunctionDef(PROTECTED,onSuccess,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false)),Void,List(Exception),Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter)))))), Annotation(Override,Map()), ValDef(NoModifiers,filter,List(),ClassType(IssueFilter,NoType,List(),List()),NoExpr,false), ClassType(IssueFilter,NoType,List(),List()), NoType, NoExpr, Void, Block(List(FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter))))), FunctionCall(Ident(requestFuture),success,List(),List(Ident(filter))), Ident(requestFuture), Ident(filter), FunctionDef(PROTECTED,onException,List(Annotation(Override,Map())),List(),List(ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false)),Void,List(RuntimeException),Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception removing issue filter), Ident(e)))))), Annotation(Override,Map()), ValDef(NoModifiers,e,List(),ClassType(Exception,NoType,List(),List()),NoExpr,false), ClassType(Exception,NoType,List(),List()), NoType, NoExpr, Void, Block(List(FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception removing issue filter), Ident(e))))), FunctionCall(Ident(Log),d,List(),List(Ident(TAG), SimpleLiteral(String,Exception removing issue filter), Ident(e))), Ident(Log), Ident(TAG), SimpleLiteral(String,Exception removing issue filter), String, Ident(e))


  def importsToJSON(imports : List[List[String]]) : String = {

      def importHierarchy(l :List[List[String]]): Map[String, Any] = l  match{
        case List(Nil) => Map[String, Any]()
        case a : List[List[String]] => a groupBy(_.head) mapValues (x =>x map (x => x.tail)) mapValues (importHierarchy)
      }

      importHierarchy(imports).toString()
  }

  def convertToReadableString(tree: AST) = {
        def matching(x : Any) : String= x match{
            case x :List[AST] => matching(x.head)
            case x : PackageDef => importsToJSON(x.imports.map(x => (x.name.split("\\.")).toList))
        }
        matching(Traverser(List(_))(tree).toList)
    }

    "Feature extractor" should "be blabla" in {
        println(convertToReadableString(getSampleAst()))
    }

    it should "coucou" in  {

    }

}
